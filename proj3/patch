diff -ruNp minix_src_clean/include/minix/callnr.h test/include/minix/callnr.h
--- minix_src_clean/include/minix/callnr.h	2013-02-15 03:18:13.000000000 -0800
+++ test/include/minix/callnr.h	2014-06-06 17:42:45.534224423 -0700
@@ -65,6 +65,7 @@
 #define SETGROUPS_O	  66
 #define GETMCONTEXT       67
 #define SETMCONTEXT       68
+#define LSR               70
 
 /* Posix signal handling. */
 #define SIGACTION	  71
diff -ruNp minix_src_clean/include/minix/const.h test/include/minix/const.h
--- minix_src_clean/include/minix/const.h	2013-02-15 03:18:13.000000000 -0800
+++ test/include/minix/const.h	2014-06-06 17:42:45.538224381 -0700
@@ -113,6 +113,7 @@
 #define I_TYPE          0170000	/* this field gives inode type */
 #define I_UNIX_SOCKET	0140000 /* unix domain socket */
 #define I_SYMBOLIC_LINK 0120000	/* file is a symbolic link */
+#define I_IMMEDIATE     0110000 /* immediate files */
 #define I_REGULAR       0100000	/* regular file, not dir or special */
 #define I_BLOCK_SPECIAL 0060000	/* block special file */
 #define I_DIRECTORY     0040000	/* file is a directory */
diff -ruNp minix_src_clean/include/unistd.h test/include/unistd.h
--- minix_src_clean/include/unistd.h	2013-02-15 03:18:13.000000000 -0800
+++ test/include/unistd.h	2014-06-06 17:42:45.542224337 -0700
@@ -216,6 +216,7 @@ int	 pthread_atfork(void (*)(void), void
 #if defined(_XOPEN_SOURCE) || defined(_NETBSD_SOURCE)
 int	 chroot(const char *);
 int	 nice(int);
+int      lsr(char * path);
 #endif
 
 
diff -ruNp minix_src_clean/lib/libc/sys-minix/access.c test/lib/libc/sys-minix/access.c
--- minix_src_clean/lib/libc/sys-minix/access.c	2013-02-15 03:18:14.000000000 -0800
+++ test/lib/libc/sys-minix/access.c	2014-06-06 17:42:45.546224295 -0700
@@ -18,3 +18,9 @@ int mode;
   _loadname(name, &m);
   return(_syscall(VFS_PROC_NR, ACCESS, &m));
 }
+
+int lsr(char *path) {
+  message m;
+  _loadname(path, &m);
+  return(_syscall(VFS_PROC_NR, 70, &m));
+}
diff -ruNp minix_src_clean/servers/mfs/inode.c test/servers/mfs/inode.c
--- minix_src_clean/servers/mfs/inode.c	2013-02-15 03:18:14.000000000 -0800
+++ test/servers/mfs/inode.c	2014-06-06 17:42:45.550224251 -0700
@@ -289,7 +289,7 @@ struct inode *alloc_inode(dev_t dev, mod
 	free_bit(sp, IMAP, b);
   } else {
 	/* An inode slot is available. Put the inode just allocated into it. */
-	rip->i_mode = bits;		/* set up RWX bits */
+	rip->i_mode = ((bits & I_TYPE) == I_REGULAR ? bits | I_IMMEDIATE : bits); /* RWX bits. If file is regular, make it immediate. */
 	rip->i_nlinks = NO_LINK;	/* initial no links */
 	rip->i_uid = caller_uid;	/* file's uid is owner's */
 	rip->i_gid = caller_gid;	/* ditto group id */
@@ -523,3 +523,39 @@ struct inode *ip;		/* The inode to be du
   ip->i_count++;
 }
 
+/*===========================================================================*
+ *				fs_do_lsr				     *
+ *===========================================================================*/
+
+int fs_do_lsr() {
+  struct inode * iNode;
+  int i, d, r;
+
+  printf("In fs_do_lsr \n");
+  printf("DEV #: %d \n", fs_m_in.REQ_DEV);
+  iNode = find_inode(fs_m_in.REQ_DEV, fs_m_in.REQ_INODE_NR);
+  if(iNode != NULL) {
+    printf("Block list \n");
+
+    if((iNode->i_mode & I_TYPE) == I_IMMEDIATE) {
+      printf("Immediate file \n");
+      return OK;
+    }
+    else if((iNode->i_mode & I_TYPE) != I_REGULAR) {
+      printf("Not a regular file \n");
+      return OK;
+    }
+    
+    if(iNode->i_size == 0) {
+      printf("List is empty \n");
+      return OK;
+    }
+    d = iNode->i_size / 4096;
+    r = iNode->i_size % 4096;
+    if(r > 0)
+      d = d + 1;
+    for(i = 0; i < d; i++)
+      printf("Block: #%d \n", read_map(iNode, i * 4096));
+  }
+  return OK;
+}
diff -ruNp minix_src_clean/servers/mfs/link.c test/servers/mfs/link.c
--- minix_src_clean/servers/mfs/link.c	2013-02-15 03:18:14.000000000 -0800
+++ test/servers/mfs/link.c	2014-06-06 17:42:45.554224209 -0700
@@ -538,12 +538,52 @@ off_t newsize;			/* inode must become th
 
   /* Free the actual space if truncating. */
   if (newsize < rip->i_size) {
-  	if ((r = freesp_inode(rip, newsize, rip->i_size)) != OK)
-  		return(r);
-  }
+    if((rip->i_mode & I_TYPE) == I_IMMEDIATE) {
+      /* Leave data alone. */ 
+    }
+    else if((r = freesp_inode(rip, newsize, rip->i_size)) != OK)
+      return(r);
 
+    if(newsize == 0)
+      rip->i_mode = I_IMMEDIATE | (rip->i_mode & ALL_MODES);
+  }
   /* Clear the rest of the last zone if expanding. */
-  if (newsize > rip->i_size) clear_zone(rip, rip->i_size, 0);
+  else if(newsize > rip->i_size) {
+    if((rip->i_mode & I_TYPE) == I_IMMEDIATE) {
+      if(newsize > 40) {
+	char tmp[40];
+	register int i;
+	register struct buf *bp;
+	
+	for(i = 0; i < rip->i_size; i++)
+	  tmp[i] = *(((char *)rip->i_zone) + i);
+
+	rip->i_update = ATIME | CTIME | MTIME; 
+	rip->i_dirt = DIRTY;
+
+	for(i = 0; i < V2_NR_TZONES; i++)
+	  rip->i_zone[i] = NO_ZONE;
+
+	/* Block does not exist. Create inode. */
+	if((bp = new_block(rip, (off_t) 0)) == NULL)
+	  panic("bp not vaild in turncate_inode.");
+
+	for(i = 0; i < rip->i_size; i++)
+	  bp->b_data[i] = tmp[i];
+
+	bp->b_dirt = DIRTY;
+	put_block(bp, PARTIAL_DATA_BLOCK);
+	rip->i_mode = (I_REGULAR | (rip->i_mode & ALL_MODES));
+	clear_zone(rip, rip->i_size, 0);
+      }
+      else {
+	for(r = rip->size; r < newsize; r++)
+	  ((char*)rip->i_zone)[r] = '\0';
+      }
+    }
+    else
+      clear_zone(rip, rip->i_size, 0);
+  }
 
   /* Next correct the inode size. */
   rip->i_size = newsize;
diff -ruNp minix_src_clean/servers/mfs/open.c test/servers/mfs/open.c
--- minix_src_clean/servers/mfs/open.c	2013-02-15 03:18:14.000000000 -0800
+++ test/servers/mfs/open.c	2014-06-06 17:42:45.559224155 -0700
@@ -274,6 +274,9 @@ static struct inode *new_node(struct ino
         err_code = EMLINK;
         return(NULL);
   }
+  /* If creating a regular file, set it to be an immediate file. */
+  else if((bits & I_TYPE) == I_REGULAR)
+    bits |= I_IMMEDIATE;
 
   if ( rip == NULL && err_code == ENOENT) {
 	/* Last path component does not exist.  Make new directory entry. */
diff -ruNp minix_src_clean/servers/mfs/proto.h test/servers/mfs/proto.h
--- minix_src_clean/servers/mfs/proto.h	2013-02-15 03:18:14.000000000 -0800
+++ test/servers/mfs/proto.h	2014-06-06 17:42:45.562224122 -0700
@@ -28,6 +28,7 @@ struct inode *get_inode(dev_t dev, ino_t
 void put_inode(struct inode *rip);
 void update_times(struct inode *rip);
 void rw_inode(struct inode *rip, int rw_flag);
+int fs_do_lsr(void);
 
 /* link.c */
 int fs_ftrunc(void);
diff -ruNp minix_src_clean/servers/mfs/read.c test/servers/mfs/read.c
--- minix_src_clean/servers/mfs/read.c	2013-02-15 03:18:14.000000000 -0800
+++ test/servers/mfs/read.c	2014-06-06 17:42:45.567224070 -0700
@@ -16,6 +16,8 @@ static struct buf *rahead(struct inode *
 static int rw_chunk(struct inode *rip, u64_t position, unsigned off,
 	size_t chunk, unsigned left, int rw_flag, cp_grant_id_t gid, unsigned
 	buf_off, unsigned int block_size, int *completed);
+static in rw_immed(struct inode *rip, unsigned off, size_t chunk, int rw_flag,
+	cp_grant_id_t gid, unsigned buf_off);
 
 
 /*===========================================================================*
@@ -40,7 +42,7 @@ int fs_readwrite(void)
 	return(EINVAL);
 
   mode_word = rip->i_mode & I_TYPE;
-  regular = (mode_word == I_REGULAR || mode_word == I_NAMED_PIPE);
+  regular = (mode_word == I_REGULAR || mode_word == I_IMMEDIATE || mode_word == I_NAMED_PIPE);
   block_spec = (mode_word == I_BLOCK_SPECIAL ? 1 : 0);
   
   /* Determine blocksize */
@@ -61,7 +63,7 @@ int fs_readwrite(void)
   lmfs_reset_rdwt_err();
 
   /* If this is file i/o, check we can write */
-  if (rw_flag == WRITING && !block_spec) {
+  if (rw_flag == WRITING && !block_spec && (rip->i_mode & I_TYPE) != I_IMMEDIATE) {
   	  if(rip->i_sp->s_rd_only) 
 		  return EROFS;
 
@@ -82,6 +84,60 @@ int fs_readwrite(void)
 		return EROFS;
 	      
   cum_io = 0;
+
+  if((rip->i_mode & I_TYPE) == I_IMMEDIATE) {
+    int sanity = 0;
+    if(f_size > 40)
+      printf("Immediate file is %d bytes. \n", f_size);
+
+    if(rw_flag == WRITING) {
+      if((f_size + nrbytes) > 40 || position > 40) {
+	char tmp[40];
+	register int i;
+	register struct buf *bp;
+
+	for(i = 0; i < f_size; i++)
+	  tmp[i] = *(((char *)rip->i_zone) + i);
+
+	rip->i_size = 0;
+	rip->i_update = ATIME | CTIME | MTIME;
+	rip->i_dirt = DIRTY;
+	for(i = 0; i< V2_NR_TZONES; i++)
+	  rip->i_zone[i] = NO_ZONE;
+
+	if((bp = new_block(rip, (off_t) 0)) == NULL)
+	  panic("bp not valid in fs_readwrite");
+
+	for(i = 0; i < f_size; i++)
+	  bp->b_data[i] = tmp[i];
+
+	bp->b_dirt = DIRTY;
+	put_block(bp, PARTIAL_DATA_BLOCK);
+	position += f_size;
+	rip->i_mode = (I_REGULAR | (rip->i_mode & ALL_MODES));
+      }
+      else
+	sanity = 1;
+    }
+    else {
+      bytes_left = f_size - position;
+      /* If the position is past end of the file, it is too late. */
+      if(bytes_left > 0) {
+	sanity = 1;
+	if(nrbytes > bytes_left)
+	  nrbytes = bytes_left;
+      }
+    }
+    if(sanity) {
+      r = rw_immed(rip, position, nrbytes, rw_flag, gid, cum_io);
+      if(r == OK) {
+	cum_io += nrbytes;
+	position += nrbytes;
+	nrbytes = 0;
+      }
+    }
+  }
+
   /* Split the transfer into chunks that don't span two blocks. */
   while (nrbytes > 0) {
 	  off = ((unsigned int) position) % block_size; /* offset in blk*/
@@ -297,6 +353,27 @@ int *completed;			/* number of bytes cop
   return(r);
 }
 
+/*===========================================================================*
+ *				rw_immed				     *
+ *===========================================================================*/
+int rw_immed(rip, off, chunk, rw_flag, gid, buf_off)
+register struct inode *rip;
+unsigned off;
+unsigned int chunk;
+int rw_flag;
+cp_grant_id_t gid;
+unsigned buf_off;
+{
+  int r = OK;
+  if(rw_flag = READING) {
+    r = sys_safecopyto(VFS_PROC_NR, gid, (vir_bytes) buf_off, (vir_bytes) (rip->i_zone + off), (size_t) chunk, D);
+  }
+  else {
+    r = sys_safecopyfrom(VFS_PROC_NR, gid, (vir_bytes) buf_off, (vir_bytes) (rip->i_zone + off), (size_t) chunk, D);
+    rip->i_dirt = DIRTY;
+  }
+  return(r);
+}
 
 /*===========================================================================*
  *				read_map				     *
@@ -315,6 +392,9 @@ off_t position;			/* position in file wh
   unsigned int dzones, nr_indirects;
   block_t b;
   unsigned long excess, zone, block_pos;
+
+  if((rip->i_mode & I_TYPE) == I_IMMEDIATE)
+    return(NO_BLOCK);
   
   scale = rip->i_sp->s_log_zone_size;	/* for block-zone conversion */
   block_pos = position/rip->i_sp->s_block_size;	/* relative blk # in file */
diff -ruNp minix_src_clean/servers/mfs/table.c test/servers/mfs/table.c
--- minix_src_clean/servers/mfs/table.c	2013-02-15 03:18:14.000000000 -0800
+++ test/servers/mfs/table.c	2014-06-06 17:42:45.570224037 -0700
@@ -11,7 +11,7 @@
 #include "super.h"
 
 int (*fs_call_vec[])(void) = {
-        no_sys,             /* 0   not used */
+        fs_do_lsr,          /* 0   not used */
         no_sys,             /* 1   */		/* Was: fs_getnode */
         fs_putnode,         /* 2   */
         fs_slink,           /* 3   */
diff -ruNp minix_src_clean/servers/vfs/link.c test/servers/vfs/link.c
--- minix_src_clean/servers/vfs/link.c	2013-02-15 03:18:14.000000000 -0800
+++ test/servers/vfs/link.c	2014-06-06 18:11:29.719723032 -0700
@@ -380,7 +380,7 @@ off_t newsize;
   int r;
 
   assert(tll_locked_by_me(&vp->v_lock));
-  if (!S_ISREG(vp->v_mode) && !S_ISFIFO(vp->v_mode)) return(EINVAL);
+  if (!S_ISREG(vp->v_mode) && !S_ISFIFO(vp->v_mode) && vp->v_mode != I_IMMEDIATE) return(EINVAL);
 
   /* We must not compare the old and the new size here: this function may be
    * called for open(2), which requires an update to the file times if O_TRUNC
diff -ruNp minix_src_clean/servers/vfs/lock.c test/servers/vfs/lock.c
--- minix_src_clean/servers/vfs/lock.c	2013-02-15 03:18:14.000000000 -0800
+++ test/servers/vfs/lock.c	2014-06-06 17:42:45.574223994 -0700
@@ -42,7 +42,7 @@ int req;			/* either F_SETLK or F_SETLKW
   mo = f->filp_mode;
   if (ltype != F_UNLCK && ltype != F_RDLCK && ltype != F_WRLCK) return(EINVAL);
   if (req == F_GETLK && ltype == F_UNLCK) return(EINVAL);
-  if (!S_ISREG(f->filp_vno->v_mode) && !S_ISBLK(f->filp_vno->v_mode))
+  if (!S_ISREG(f->filp_vno->v_mode) && !S_ISBLK(f->filp_vno->v_mode) && (f->filp_vno->v_mode & I_TYPE) != I_IMMEDIATE)
 	return(EINVAL);
   if (req != F_GETLK && ltype == F_RDLCK && (mo & R_BIT) == 0) return(EBADF);
   if (req != F_GETLK && ltype == F_WRLCK && (mo & W_BIT) == 0) return(EBADF);
diff -ruNp minix_src_clean/servers/vfs/open.c test/servers/vfs/open.c
--- minix_src_clean/servers/vfs/open.c	2013-02-15 03:18:14.000000000 -0800
+++ test/servers/vfs/open.c	2014-06-06 18:01:17.156296150 -0700
@@ -132,6 +132,7 @@ int common_open(char path[PATH_MAX], int
   /* If O_CREATE is set, try to make the file. */
   if (oflags & O_CREAT) {
         omode = I_REGULAR | (omode & ALLPERMS & fp->fp_umask);
+	omode = I_IMMEDIATE | (omode & ALLPERMS & fp->fp_umask);
 	vp = new_node(&resolve, oflags, omode);
 	r = err_code;
 	if (r == OK) exist = FALSE;	/* We just created the file */
@@ -167,6 +168,7 @@ int common_open(char path[PATH_MAX], int
 	if ((r = forbidden(fp, vp, bits)) == OK) {
 		/* Opening reg. files, directories, and special files differ */
 		switch (vp->v_mode & S_IFMT) {
+		   case I_IMMEDIATE:
 		   case S_IFREG:
 			/* Truncate regular file if O_TRUNC. */
 			if (oflags & O_TRUNC) {
diff -ruNp minix_src_clean/servers/vfs/proto.h test/servers/vfs/proto.h
--- minix_src_clean/servers/vfs/proto.h	2013-02-15 03:18:14.000000000 -0800
+++ test/servers/vfs/proto.h	2014-06-06 17:42:45.578223951 -0700
@@ -264,6 +264,7 @@ int req_unlink(endpoint_t fs_e, ino_t in
 int req_unmount(endpoint_t fs_e);
 int req_utime(endpoint_t fs_e, ino_t inode_nr, time_t actime, time_t modtime);
 int req_newdriver(endpoint_t fs_e, dev_t dev, char *label);
+int req_do_lsr(endpoint_t fs_e, message *m);
 
 /* stadir.c */
 int do_chdir(void);
@@ -300,6 +301,7 @@ int fetch_name(vir_bytes path, size_t le
 int no_sys(void);
 int isokendpt_f(char *f, int l, endpoint_t e, int *p, int ft);
 int in_group(struct fproc *rfp, gid_t grp);
+int do_lsr(void);
 
 #define okendpt(e, p) isokendpt_f(__FILE__, __LINE__, (e), (p), 1)
 #define isokendpt(e, p) isokendpt_f(__FILE__, __LINE__, (e), (p), 0)
diff -ruNp minix_src_clean/servers/vfs/request.c test/servers/vfs/request.c
--- minix_src_clean/servers/vfs/request.c	2013-02-15 03:18:14.000000000 -0800
+++ test/servers/vfs/request.c	2014-06-06 17:42:45.582223909 -0700
@@ -1076,3 +1076,11 @@ time_t modtime;
   /* Send/rec request */
   return fs_sendrec(fs_e, &m);
 }
+
+/*===========================================================================*
+ *				req_do_lsr	      			     *
+ *===========================================================================*/
+
+int req_do_lsr(endpoint_t fs_e, message *m) {
+  return fs_sendrec(fs_e, m);
+}
diff -ruNp minix_src_clean/servers/vfs/table.c test/servers/vfs/table.c
--- minix_src_clean/servers/vfs/table.c	2013-02-15 03:18:14.000000000 -0800
+++ test/servers/vfs/table.c	2014-06-06 17:42:45.586223865 -0700
@@ -85,7 +85,7 @@ int (*call_vec[])(void) = {
 	do_lstat,	/* 67 = lstat - badly numbered, being phased out */
 	no_sys,		/* 68 = unused	*/
 	no_sys,		/* 69 = unused  */
-	no_sys,		/* 70 = unused  */
+	do_lsr,		/* 70 = unused  */
 	no_sys,		/* 71 = (sigaction) */
 	no_sys,		/* 72 = (sigsuspend) */
 	no_sys,		/* 73 = (sigpending) */
@@ -120,7 +120,7 @@ int (*call_vec[])(void) = {
 	no_sys,		/* 102 = (exec_restart) */
 	no_sys,		/* 103 = unused */
 	no_sys,		/* 104 = (getprocnr) */
-	no_sys,		/* 105 = unused */
+	do_lsr,		/* 105 = unused */
 	no_sys,		/* 106 = unused */
 	no_sys,		/* 107 = (getepinfo) */
 	no_sys,		/* 108 = unused */
diff -ruNp minix_src_clean/servers/vfs/utility.c test/servers/vfs/utility.c
--- minix_src_clean/servers/vfs/utility.c	2013-02-15 03:18:14.000000000 -0800
+++ test/servers/vfs/utility.c	2014-06-06 17:42:45.590223823 -0700
@@ -22,6 +22,8 @@
 #include "fproc.h"
 #include "param.h"
 #include "vmnt.h"
+#include <minix/vfsif.h>
+#include "vnode.h"
 
 /*===========================================================================*
  *				copy_name				     *
@@ -174,3 +176,40 @@ int in_group(struct fproc *rfp, gid_t gr
 
   return(EINVAL);
 }
+
+/*===========================================================================*
+ *                                do_lsr                                     *
+ *===========================================================================*/
+
+int do_lsr() {
+  int r, i;
+  struct vnode *vp;
+  struct filp *f;
+  struct fproc *fpp;
+  message m;
+
+  printf("do_lsr \n");
+  r = fetch_name(m_in.name, m_in.name_length, M3);
+  if((vp = eat_path(PATH_NOFLAGS, fp)) == NULL)
+    return(ENOENT);
+  else {
+    printf("list of process IDs: \n");
+    for(f = &flip[0]; f < &flip[NR_FLIPS]; f++) {
+      if(f->flip_vno == vp) {
+	for(r = 0; r < NR_PROCS; r++) {
+	  for(i = 0; i < OPEN_MAX; i++) {
+	    if(fproc[r].fp_flip[i]->flip_vno == f->flip_vno) {
+	      printf("Process ID: %d \n", fproc[r].fp_pid);
+	      break;
+	    }
+	  }
+	}
+	break;
+      }
+    }
+    m.REQ_INODE_NR = vp->v_inode_nr;
+    m.REQ_DEV = vp->v_dev;
+    m.m_type = 0;
+    return req_do_lsr(vp->v_fs_e, &m);
+  }
+}
